name: Check Issue Version

on:
  issues:
    types: [opened]

jobs:
  check_version:
    runs-on: ubuntu-latest
    permissions:
      issues: write # Needed to comment on issues
      contents: read # Needed to get latest release info

    steps:
      - name: Parse issue form data
        id: parse_issue
        uses: peter-murray/issue-forms-body-parser@v4 # Or zentered/issue-forms-body-parser@v2
        with:
          issue_id: ${{ github.event.issue.number }}
          github_token: ${{ secrets.GITHUB_TOKEN }}

      - name: Get latest release version
        id: get_latest_release
        uses: pozetroninc/github-action-get-latest-release@v0.8.0 # Or rez0n/actions-github-release@v2.0
        with:
          repository: cloneofghosts/python-pirate-weather # Your repo
          excludes: "prerelease,draft" # Ensure you get stable releases

      - name: Clean up latest release version (remove 'v' prefix)
        id: clean_release_version
        run: |
          RAW_LATEST_VERSION="${{ steps.get_latest_release.outputs.release }}"
          # Remove 'v' prefix if it exists
          CLEANED_LATEST_VERSION="${RAW_LATEST_VERSION#v}"
          echo "CLEANED_LATEST_VERSION=$CLEANED_LATEST_VERSION" >> "$GITHUB_OUTPUT"
        shell: bash

      - name: Compare versions with Python and comment
        env:
          ISSUE_VERSION: ${{ steps.parse_issue.outputs.payload.version }}
          # Use the cleaned version here
          LATEST_VERSION: ${{ steps.clean_release_version.outputs.CLEANED_LATEST_VERSION }}
          ISSUE_NUMBER: ${{ github.event.issue.number }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Install Python and packaging library if not already in runner image
          python -m pip install packaging

          python -c "
import os
from packaging.version import parse

issue_version = os.environ['ISSUE_VERSION']
latest_version = os.environ['LATEST_VERSION']
issue_number = os.environ['ISSUE_NUMBER']
github_token = os.environ['GITHUB_TOKEN'] # Access GitHub Token

print(f'Issue version: {issue_version}')
print(f'Latest release version: {latest_version}')

# Ensure the issue version is parseable (e.g., if user inputs garbage)
try:
    parsed_issue_version = parse(issue_version)
except Exception:
    print(f'Could not parse issue version: {issue_version}. Skipping version comparison.')
    exit(0) # Exit gracefully if version cannot be parsed

try:
    parsed_latest_version = parse(latest_version)
except Exception:
    print(f'Could not parse latest release version: {latest_version}. Skipping version comparison.')
    exit(0) # Exit gracefully

if parsed_issue_version < parsed_latest_version:
    print('Version mismatch detected. Commenting on issue.')
    update_instructions = f'''It looks like you are running an older version of `python-pirate-weather` (`{issue_version}`).

**Please update to the latest stable version (`{latest_version}`) before reporting issues, as your issue might already be resolved.**

You can update by running:
\`\`\`bash
pip install --upgrade python-pirate-weather
\`\`\`

If the issue persists after updating, please provide the new version number in a comment.
'''
    # Use GitHub CLI to add a comment
    # Ensure gh CLI is authenticated with the GITHUB_TOKEN
    os.system(f'echo \"{update_instructions}\" | gh issue comment {issue_number} --repo {os.environ.get("GITHUB_REPOSITORY")} --body-file -')
else:
    print('User is running the latest version or a newer/unreleased version.')
"